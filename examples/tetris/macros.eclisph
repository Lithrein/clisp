(macro when (condition $body body)
  `(if ,condition
    (progn
      ,@body)))

(macro unless (condition $body body)
  `(if (! ,condition)
     (progn
       ,@body)))

(macro awhen (condition $body body)
  `(progn
     (def it int ,condition)
     (when it ,@body)))

(macro unwind-protect (form $body cleanup-forms)
  (let ((cleanup (gensym "cleanup"))
        (result  (gensym "result")))
    `(progn
       (def ,result int)
       (macrolet ((return (expr)
                      `(progn
                        (= ,',result ,expr)
                        (goto ,',cleanup))))
        ,form)
        (label ,cleanup)
        ,@cleanup-forms
       (return ,result))))

(macro with-open-file ((var filename mode) $body body)
  `(progn
    (def ,var (ptr FILE) NULL)
    (unwind-protect
     (progn
        (= ,var (fopen ,filename ,mode))
        ,@body)
      (if ,var
        (fclose ,var)))))

(macro with-sdl2-init (args $body body)
  `(unwind-protect
     (progn
       (when (SDL_Init ,@args)
         (fprintf stderr "Error SDL_Init: %s" (SDL_GetError))
         (return EXIT_FAILURE))
      ,@body)
     (SDL_Quit)))

(macro with-sdl2-window ((window wtitle x y w h flags) $body body)
  `(progn
      (def ,window (ptr SDL_Window)
           (SDL_CreateWindow ,wtitle ,x ,y ,w ,h ,flags))
      (unwind-protect
        (progn
          (unless ,window
            (fprintf stderr "Error SDL_CreateWindow: %s" (SDL_GetError))
            (return EXIT_FAILURE))
         ,@body)
      (SDL_DestroyWindow ,window))))

(macro with-sdl2-renderer ((renderer window index flags) $body body)
  `(progn
      (def ,renderer (ptr SDL_Renderer)
           (SDL_CreateRenderer ,window ,index ,flags))
      (unwind-protect
        (progn
           (unless ,renderer
             (fprintf stderr "Error SDL_CreateRenderer: %s" (SDL_GetError))
             (return EXIT_FAILURE))
         ,@body)
      (SDL_DestroyRenderer ,renderer))))

